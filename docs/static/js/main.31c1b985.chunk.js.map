{"version":3,"sources":["components/FindOfCity.js","helper/getWeatherData.js","components/WeatherCard.js","components/WeatherGrid.js","hooks/useFetch.js","WeatherApp.js","index.js"],"names":["Addcity","setCitys","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","city","type","placeholder","value","onChange","target","className","getWeatherData","citys","a","urlApi","encodeURI","fetch","resp","json","name","main","temperature","temp","temp_min","temp_max","id","weather","weatherData","tempMin","kelvinToCelsius","k","toFixed","tempMax","icon","WeatherCard","src","alt","WeatherGrid","loading","data","state","setState","useEffect","then","useFetch","WhatherApp","FindOfCity","ReactDOM","render","WeatherApp","document","getElementById"],"mappings":"0MA4BeA,EA1BC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAClB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYA,OACC,sBAAMC,SARc,SAACC,GACrBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAS,SAACS,GAAD,OAAUP,KACnBC,EAAc,MAIf,SACC,uBACCO,KAAK,OACLC,YAAY,iBACZC,MAAOV,EACPW,SAhBuB,SAACR,GAC1BF,EAAcE,EAAES,OAAOF,QAgBrBG,UAAU,kB,8BCtBRC,EAAc,uCAAG,WAAOC,GAAP,qCAAAC,EAAA,4DACP,mCACTC,EAFgB,4DAE8CC,UACnEH,GAHqB,kBACP,oCADO,SAKHI,MAAMF,GALH,cAKhBG,EALgB,gBAWZA,EAAKC,OAXO,uBAOrBC,EAPqB,EAOrBA,KAPqB,IAQrBC,KAAcC,EARO,EAQbC,KAAmBC,EARN,EAQMA,SAAUC,EARhB,EAQgBA,SACrCC,EATqB,EASrBA,GACAC,EAVqB,EAUrBA,QAGKC,EAAc,CACnBR,KAAMA,EACNS,SAHKC,EAAkB,SAACC,GAAD,iBAAWA,EAAI,QAAQC,QAAQ,GAA/B,YAGER,GACzBS,QAASH,EAAgBL,GACzBF,KAAMO,EAAgBR,GACtBI,GAAIA,EACJQ,KAAK,mCAAD,OAAqCP,EAAQ,GAAGO,KAAhD,SAnBiB,kBAsBfN,GAtBe,4CAAH,sDAyBLhB,ICRAuB,EAjBK,SAAC,GAA4C,IAA1Cf,EAAyC,EAAzCA,KAAMS,EAAmC,EAAnCA,QAASI,EAA0B,EAA1BA,QAASV,EAAiB,EAAjBA,KAAMW,EAAW,EAAXA,KACpD,OACC,sBAAKvB,UAAU,eAAf,UACC,qBAAKA,UAAU,WAAWyB,IAAKF,EAAMG,IAAKH,IAC1C,+BACC,mBAAGvB,UAAU,eACZS,KAEF,6BAAKG,IACL,0BAASZ,UAAU,eAAnB,UACC,uCAAUkB,EAAV,OACA,uCAAUI,EAAV,cCKWK,EAbK,SAAC,GAAe,IACnC,ECDuB,SAACzB,GACxB,MAA0BhB,mBAAS,CAClC0C,SAAS,EACTC,KAAM,KAFP,mBAAOC,EAAP,KAAcC,EAAd,KAWA,OANAC,qBAAU,WACT/B,EAAeC,GAAO+B,MAAK,SAACjB,GAC3Be,EAAS,CAAEH,SAAS,EAAOC,KAAMb,SAEhC,CAACd,IAEG4B,EDXmBI,CADQ,EAAZhC,OACd2B,EAAR,EAAQA,KAAMD,EAAd,EAAcA,QACd,OACC,mCACEA,EACA,mBAAG5B,UAAU,qCAEb,cAAC,EAAD,eAA+B6B,GAAbA,EAAKd,OEIZoB,EAXI,WAClB,MAA0BjD,mBAAS,aAAnC,mBAAOgB,EAAP,KAAcjB,EAAd,KACA,OACC,qCACC,4CACA,cAACmD,EAAD,CAAYnD,SAAUA,IACtB,cAAC,EAAD,CAAyBiB,MAAOA,GAAdA,OCJrBmC,IAASC,OAAO,cAACC,EAAD,IAAgBC,SAASC,eAAe,W","file":"static/js/main.31c1b985.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst Addcity = ({ setCitys }) => {\n\tconst [inputValue, setInputValue] = useState('');\n\n\tconst handleInputChange = (e) => {\n\t\tsetInputValue(e.target.value);\n\t};\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tif (inputValue.trim().length > 3) {\n\t\t\tsetCitys((city) => inputValue);\n\t\t\tsetInputValue('');\n\t\t}\n\t};\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<input\n\t\t\t\ttype='text'\n\t\t\t\tplaceholder='Search weather'\n\t\t\t\tvalue={inputValue}\n\t\t\t\tonChange={handleInputChange}\n\t\t\t\tclassName='text-field'\n\t\t\t/>\n\t\t</form>\n\t);\n};\n\nexport default Addcity;\n","const getWeatherData = async (citys) => {\n\tconst apiKey = 'f88874f94ed3d3fd6a271bd0ca65b616';\n\tconst urlApi = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURI(\n\t\tcitys\n\t)}&appid=${apiKey}`;\n\tconst resp = await fetch(urlApi);\n\tconst {\n\t\tname,\n\t\tmain: { temp: temperature, temp_min, temp_max },\n\t\tid,\n\t\tweather,\n\t} = await resp.json();\n\tconst kelvinToCelsius = (k) => `${(k - 273.15).toFixed(2)} CÂº`;\n\tconst weatherData = {\n\t\tname: name,\n\t\ttempMin: kelvinToCelsius(temp_min),\n\t\ttempMax: kelvinToCelsius(temp_max),\n\t\ttemp: kelvinToCelsius(temperature),\n\t\tid: id,\n\t\ticon: `http://openweathermap.org/img/w/${weather[0].icon}.png`,\n\t};\n\n\treturn weatherData;\n};\n\nexport default getWeatherData;\n","const WeatherCard = ({ name, tempMin, tempMax, temp, icon }) => {\n\treturn (\n\t\t<div className='weather-card'>\n\t\t\t<img className='img-icon' src={icon} alt={icon} />\n\t\t\t<h2>\n\t\t\t\t<i className='bx bxs-map'></i>\n\t\t\t\t{name}\n\t\t\t</h2>\n\t\t\t<h2>{temp}</h2>\n\t\t\t<section className='section-temp'>\n\t\t\t\t<h4>Min: {tempMin} </h4>\n\t\t\t\t<h4>Max: {tempMax} </h4>\n\t\t\t</section>\n\t\t</div>\n\t);\n};\n\nexport default WeatherCard;\n","import { useFetch } from '../hooks/useFetch';\nimport WeatherCard from './WeatherCard';\n\nconst WeatherGrid = ({ citys }) => {\n\tconst { data, loading } = useFetch(citys);\n\treturn (\n\t\t<>\n\t\t\t{loading ? (\n\t\t\t\t<i className='bx bx-loader-alt bx-spin loading'></i>\n\t\t\t) : (\n\t\t\t\t<WeatherCard key={data.id} {...data} />\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nexport default WeatherGrid;\n","import { useState, useEffect } from 'react';\nimport getWeatherData from '../helper/getWeatherData';\n\nexport const useFetch = (citys) => {\n\tconst [state, setState] = useState({\n\t\tloading: true,\n\t\tdata: {},\n\t});\n\n\tuseEffect(() => {\n\t\tgetWeatherData(citys).then((weather) => {\n\t\t\tsetState({ loading: false, data: weather });\n\t\t});\n\t}, [citys]);\n\n\treturn state;\n};\n","import { useState } from 'react';\nimport FindOfCity from './components/FindOfCity';\nimport WeatherGrid from './components/WeatherGrid';\nconst WhatherApp = () => {\n\tconst [citys, setCitys] = useState('Guayaquil');\n\treturn (\n\t\t<>\n\t\t\t<h2>WeatherApp</h2>\n\t\t\t<FindOfCity setCitys={setCitys} />\n\t\t\t<WeatherGrid key={citys} citys={citys} />\n\t\t</>\n\t);\n};\n\nexport default WhatherApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport WeatherApp from './WeatherApp.js';\n\nReactDOM.render(<WeatherApp />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}